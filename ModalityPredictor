//
//  ModalityPredictor.cpp
//  segmenthreetion
//
//  Created by Albert Clap√©s on 02/03/14.
//
//

#include "ModalityPredictor.h"
#include "StatTools.h"

//
// ModalityPredictorBase
//

template<class PredictorT>
ModalityPredictorBase<PredictorT>::ModalityPredictorBase()
{

}

template<class PredictorT>
void ModalityPredictorBase<PredictorT>::setData(ModalityGridData data, GridMat descriptors)
{
    m_data = data;
    m_descriptors = descriptors;
}

template<class PredictorT>
void ModalityPredictorBase<PredictorT>::setModelSelection(int k, bool best)
{
    m_modelSelecK = k;
    m_selectBest = best;
}

template<class PredictorT>
void ModalityPredictorBase<PredictorT>::setModelValidation(int k, int seed)
{
    m_testK = k;
    m_seed = seed;
}


//
// ModalityPredictor<PredictorT>
//

template<class PredictorT>
ModalityPredictor<PredictorT>::ModalityPredictor()
        : ModalityPredictorBase<PredictorT>()
{
    
}

template<class PredictorT>
void ModalityPredictor<PredictorT>::setData(ModalityGridData data, GridMat descriptors)
{
    ModalityPredictorBase<PredictorT>::setData(data, descriptors);
}

template<class PredictorT>
void ModalityPredictor<PredictorT>::setModelSelection(int k, bool best)
{
    ModalityPredictorBase<PredictorT>::setModelSelection(k, best);
}

template<class PredictorT>
void ModalityPredictor<PredictorT>::setModelValidation(int k, int seed)
{
    ModalityPredictorBase<PredictorT>::setModelValidation(k, seed);
}

//
// ModalityPredictor<cv::EM>
//

ModalityPredictor<cv::EM>::ModalityPredictor()
: ModalityPredictorBase<cv::EM>()
{
    
}

void ModalityPredictor<cv::EM>::setData(ModalityGridData data, GridMat descriptors)
{
    ModalityPredictorBase<cv::EM>::setData(data, descriptors);
}

void ModalityPredictor<cv::EM>::setModelSelection(int k, bool best)
{
    ModalityPredictorBase<cv::EM>::setModelSelection(k, best);
}

void ModalityPredictor<cv::EM>::setModelValidation(int k, int seed)
{
    ModalityPredictorBase<cv::EM>::setModelValidation(k, seed);
}

void ModalityPredictor<cv::EM>::setNumOfMixtures(int m)
{
    m_nmixtures.clear();
    m_nmixtures.push_back(m);
}

void ModalityPredictor<cv::EM>::setNumOfMixtures(vector<int> m)
{
    m_nmixtures = m;
}

void ModalityPredictor<cv::EM>::setLoglikelihoodThresholds(int t)
{
    m_logthresholds.clear();
    m_logthresholds.push_back(t);
}

void ModalityPredictor<cv::EM>::setLoglikelihoodThresholds(vector<int> t)
{
    m_logthresholds = t;
}

void ModalityPredictor<cv::EM>::predict(GridMat predictions, GridMat loglikelihoods)
{
    cv::Mat partitions;
    cvpartition(m_data.getTags(), m_testK, m_seed, partitions);
    
    for (int i = 0; i < m_testK; i++)
    {
        ModalityGridData mgd (partitions, i, ModalityGridData::TRAIN);
    }
    
}


// Explicit template instanciation (to avoid linking errors)
template class ModalityPredictorBase<cv::EM>;
template class ModalityPredictor<cv::EM>;